plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.6'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'com.github.node-gradle.node' version '7.0.2'
}

group = 'com.yl'
version = '0.0.1-SNAPSHOT'

node {
    version = '18.17.1'           // 원하는 Node.js 버전
    yarnVersion = '1.22.22'       // 원하는 Yarn 버전
    download = true               // 로컬에 Node/Yarn 설치해 사용
    workDir = file("${project.buildDir}/nodejs")
    yarnWorkDir = file("${project.buildDir}/yarn")
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

bootRun {
    systemProperty 'file.encoding', 'UTF-8'
    jvmArgs = ['-Dfile.encoding=UTF-8']
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-cache'
    
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    annotationProcessor 'com.querydsl:querydsl-apt:5.0.0:jakarta'
    annotationProcessor 'jakarta.annotation:jakarta.annotation-api'
    annotationProcessor 'jakarta.persistence:jakarta.persistence-api'
    
    compileOnly 'org.projectlombok:lombok'
//    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'com.h2database:h2'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    
    // 테스트에서도 QueryDSL Q클래스 사용
    testAnnotationProcessor 'com.querydsl:querydsl-apt:5.0.0:jakarta'
    testAnnotationProcessor 'jakarta.annotation:jakarta.annotation-api'
    testAnnotationProcessor 'jakarta.persistence:jakarta.persistence-api'
}

tasks.named('test') {
    useJUnitPlatform()
}

// QueryDSL 설정
def generated = 'src/main/generated'

// querydsl QClass 파일 생성 위치를 지정
tasks.withType(JavaCompile) {
    options.getGeneratedSourceOutputDirectory().set(file(generated))
}

// java source set 에 querydsl QClass 위치 추가
sourceSets {
    main.java.srcDirs += [ generated ]
}

// gradle clean 시에 QClass 디렉토리 삭제
clean {
    delete file(generated)
    delete file('frontend/build') // React 빌드 폴더도 삭제
}

task buildFrontend(type: YarnTask) {
    dependsOn yarn_install
    args = ['build']
    workingDir = file('frontend') // 여기가 중요
}

task copyFrontend(type: Copy) {
    dependsOn buildFrontend
    from 'frontend/build'
    into 'src/main/resources/static'
}

processResources.dependsOn copyFrontend
build.dependsOn copyFrontend
